# ========================== C2MON DAQ Configuration ===========================
#
# NOTE: C2MON comes with reasonable defaults for most settings.
#       Before you get out to tweak and tune the configuration, make sure you
#       understand what are you trying to accomplish and the consequences.
#
# The primary way of configuring a DAQ is via this file. This template lists
# the most important settings you may want to configure for a production cluster.
#
# Please see the documentation for further information on configuration options:
# <https://c2mon.web.cern.ch/c2mon/docs/user-guide/daq-api/index.html>
#
# ------------------------------------ Core ------------------------------------
#
# Time (in ms) which the DAQ waits for a server response:
#
# c2mon.daq.serverRequestTimeout = 120000
#
# Tolerance of the freshness monitor. A tag will be considered stale, if it is
# not updated within (freshnessInterval * freshnessTolerance) seconds.
# The freshness interval is configured on the tag itself:
#
# c2mon.daq.freshnessTolerance = 1.5
#
# Path to a local configuration file. If set, the DAQ will load its 
# configuration from this file rather than retrieving it from the server:
#
# c2mon.daq.localConfigFile = null
#
# Path on the local machine to which to save the remote configuration. This
# can then subsequently be modified and used as a local configuration:
#
# c2mon.daq.saveRemoteConfig = null
#
# Enable this to option to prevent sending more alive message updates to the
# server than actually required by the configured frequency:
#
# c2mon.daq.equipment.alive.filtering = false
#
# ------------------------------------ JMS -------------------------------------
#
# Warning! Changing the domain will change JMS queue and topic names. Please be
# aware that the server has to listen to the same domain prefix!
#
# c2mon.domain = c2mon
#
# Tag publication mode. Possible values are:
# single: publish to a single broker (default)
# double: publish to two brokers (e.g for feeding a test server with
#         operational data)
# test:   do not publish at all. Interesting for testing a DAQ process
#
# c2mon.daq.jms.mode = single
#
# ActiveMQ connection configuration URL of the primary JMS broker to which to
# publish. More information about how to configure the URL can be found here:
# http://activemq.apache.org/connection-configuration-uri.html
#
# c2mon.daq.jms.url = failover:tcp://0.0.0.0:61616
#
# ActiveMQ connection configuration URL of the secondary ActiveMQ JMS broker to
# which to publish (only relevant when running in double publication mode):
#
# c2mon.daq.jms.secondaryUrl = failover:tcp://0.0.0.0:61617
#
# Maximum number of tag value objects to be packed into a single JMS message
# sent to the server.
#
# c2mon.daq.jms.maxMessageFrameSize = 1000
#
# Interval in milliseconds at which High-Priority (5 - 9) messages are to be
# sent to the server, if there are tag updates to be processed and
# maxMessageFrameSize is not reached.
#
# c2mon.daq.jms.maxMessageDelayPriorityHigh = 500L
#
# Interval in milliseconds at which Medium-Priority (4) messages are to be sent
# to the server, if there are tag updates to be processed and 
# maxMessageFrameSize is not reached.
#
# c2mon.daq.jms.maxMessageDelayPriorityMedium = 1000L
#
# Interval in milliseconds at which Low-Priority (1 - 3) messages are to be sent
# to the server, if there are tag updates to be processed and
# maxMessageFrameSize is not reached.
#
# c2mon.daq.jms.maxMessageDelayPriorityLow = 1000L
#
# ----------------------------------- Filter -----------------------------------
#
# Enable/disable publication of filtered values to a broker. This is e.g.
# interesting for gathering statistics about filtered data. The filter queue
# name is "${c2mon.daq.jms.queuePrefix}.filter":
#
# c2mon.daq.filter.publishFilteredValues = false
#
# Maximum capacity of the filter buffer queue. If this capacity is exceeded,
# a FIFO strategy will be applied to the buffer:
#
# c2mon.daq.filter.bufferCapacity = 10000
#
# ActiveMQ connection configuration URL of the broker to which to publish
# filtered values. Only relevant if c2mon.daq.filter.publishFilteredValues=true:
#
# c2mon.daq.filter.jms.url = tcp://0.0.0.0:61616
#
# --------------------------- Dynamic time deadband ----------------------------
#
# Enable/disable the dynamic time deadband support. C2MON uses therefore a
# Moving Average Counter strategy:
#
# c2mon.daq.filter.dynamicDeadband.enabled = false
#
# The number of counters used per tag:
#
# c2mon.daq.filter.dynamicDeadband.windowSize = 5
#
# The time [ms] in which the average number of tag updates is checked and the
# next counter is used. Default is 1 minute:
#
# c2mon.daq.filter.dynamicDeadband.checkInterval = 60000
#
# The maximum number of tag updates per check interval averaged over the counters
# (windowSize). If there are more than this number of updates within the window,
# the time deadband is activated for the given tag:
#
# c2mon.daq.filter.dynamicDeadband.activationThreshold = 20
#
# Threshold at which the dynamic deadband will be deactivated. If there are
# fewer than this number of updates within the window, the time deadband will
# deactivate:
#
# c2mon.daq.filter.dynamicDeadband.deactivationThreshold = 15
#
# The time deadband interval (ms) that will be forced if the activation threshold
# is exceeded. Only the latest value will be sent to the sever at the given interval
# rate. All other value updates are filtered out. Default is 30 sec:
#
# c2mon.daq.filter.dynamicDeadband.forcedDeadbandInterval = 30000
#