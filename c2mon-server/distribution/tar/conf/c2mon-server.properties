# ========================= C2MON Server Configuration =========================
#
# NOTE: C2MON comes with reasonable defaults for most settings.
#       Before you get out to tweak and tune the configuration, make sure you
#       understand what are you trying to accomplish and the consequences.
#
# The primary way of configuring a server is via this file. This template lists
# the most important settings you may want to configure for a production cluster.
#
# Please see the documentation for further information on configuration options:
# <https://c2mon.web.cern.ch/c2mon/docs/user-guide/server/index.html>
#
# --------------------------- Common server config -----------------------------
#
# Warning! Changing the domain will change JMS queue and topic names.
#
# c2mon.domain = c2mon
#
#
# The name of this C2MON server node
#
# c2mon.server.name = C2MON-SERVER
#
#
# Absolute path to the installation directory of this node.
# Used to store e.g. the configuration reports.
#
# c2mon.server.home = /tmp
#
#
# Archive configuration reports on disk
#
# c2mon.server.archiveReports = true
#
#
# Enable/disable test mode. In test mode, all DAQ connections are accepted
# regardless of whether another DAQ with the same name is already connected
#
# c2mon.server.testMode = false
#
#
# Sets a common JMS broker URL for DAQ and Client. If you need to use separate
# brokers for clients and DAQs in a production setup, override
# 'c2mon.server.daq.jms.url' and 'c2mon.server.client.jms.url'
#
# More information about the ActiveMQ URI format can be found here:
# http://activemq.apache.org/uri-protocols.html
#
c2mon.server.jms.url = tcp://0.0.0.0:61616
#
#
# Enable/disable the embedded broker
#
# c2mon.server.jms.embedded = false
#
#
# Common JDBC URL for backup- and history database.
# Please note, you can also set separate database accounts
#
# (Default) - default persistent database under /tmp/c2mondb
#c2mon.server.jdbc.url = jdbc:hsqldb:file:///tmp/c2mondb;sql.syntax_ora=true;hsqldb.default_table_type=cached;hsqldb.cache_rows=1000;hsqldb.result_max_memory_rows=2000;hsqldb.cache_size=100
c2mon.server.jdbc.url=jdbc:hsqldb:hsql://localhost/c2mondb;sql.syntax_ora=true
#
#
# Common database account username
#
c2mon.server.jdbc.username = sa
#
#
# Common database account password
#
c2mon.server.jdbc.password =
#
# Common database driver classname
#
# c2mon.server.jdbc.driver-class-name = org.hsqldb.jdbcDriver
#
#
# Example driver class names for Oracle, MySQL
# c2mon.server.jdbc.driver-class-name = oracle.jdbc.OracleDriver
# c2mon.server.jdbc.driver-class-name = oracle.jdbc.OracleDriver
#
#  IMPORTANT : C2MON uses multiple datasources - each datasource inherits
#              basic spring datasource properties from c2mon.server.jdbc
#              (url, username, password, driver-class-name, test-while-idle,
#               test-on-borrow, validation-query)
#              Any other specific datasource property has to be specified
#              for EACH datasource :
#               - c2mon.server.cachedbaccess.jdbc
#               - c2mon.server.history.jdbc
#               - c2mon.server.configuratoin.jdbc
# 
# ----------------------------------- Alarm ------------------------------------
#
# The time range in seconds for the 'oscNumbers' threshold
#
# c2mon.server.alarm.oscillation.timeRange = 60
#
#
# The maximum numbers of alarm state changes during the given time range
#
# c2mon.server.alarm.oscillation.oscNumbers = 6
#
#
# The time in seconds before the alarm oscillation flag gets removed once the 
# flapping has stopped
#
# c2mon.server.alarm.oscillation.timeOscillationAlive = 180
#
#
# ----------------------------------- Cache ------------------------------------
#
# C2MON server cluster cache mode.
# Available options:
#
# multi: Multi-server clustered mode. Requires ehcache-ee.jar and
# terracotta-toolkit-runtime.jar, as well as a running Terracotta instance
# that has to be specified at C2MON startup with
# -Dterracotta.config.location="<terracotta-main>:<port>,<terracotta-mirror>:<port>"
#
# single: Standalone mode. Requires ehcache-ee.jar. Supports Ehcache fast
# cache loading, when skipPreloading=true
#
# single-nonpersitent: Standalone non-persistent mode. Requires
# ehcache-core.jar. Does not support Ehcache fast cache loading.
#
# c2mon.server.cache.mode = single-nonpersistent
#
#
# Enable/disable preloading of the cache from the database at startup. This
# flag is only relevant in "single" mode for fast cache loading from Ehcache
# persistence file
#
# c2mon.server.cache.skipPreloading = false
#
#
# How long (in ms) the buffered cache listener should sleep between pulls
#
# c2mon.server.cache.bufferedListenerPullFrequency = 5000;
#
# --------------------------- Cache backup database ----------------------------
#
# JDBC URL pointing to a database containing the cache backup schema
#
# When using a URL of the form hsql://*, the C2MON server will start
# an in-process HSQL database server which will be accessible to other
# processes.
#
# c2mon.server.cachedbaccess.jdbc.url = ${c2mon.server.jdbc.url}
#
#
# Backup database account username
#
# c2mon.server.cachedbaccess.jdbc.username = ${c2mon.server.jdbc.username}
#
#
# Backup database account password
#
# c2mon.server.cachedbaccess.jdbc.password = ${c2mon.server.jdbc.password}
#
#
# Optional Spring properties to keep the session open
c2mon.server.cachedbaccess.jdbc.test-while-idle = true
c2mon.server.cachedbaccess.jdbc.test-on-borrow = true
# (HSQLDB)
c2mon.server.cachedbaccess.jdbc.validation-query = SELECT 1 FROM INFORMATION_SCHEMA.SYSTEM_USERS
# (MySQL)
# c2mon.server.cachedbaccess.jdbc.validation-query = SELECT 1
# (Oracle)
# c2mon.server.cachedbaccess.jdbc.validation-query = SELECT 1 FROM DUAL
#
# -------------------------------- Cache loading -------------------------------
#
# Maximum number of threads used to load caches from the database after a
# complete restart. For best performance, ensure there are as many (or more)
# database connections available
#
# c2mon.server.cacheloading.maxThreads = 20
#
#
# Number of cache objects to be loaded in a single task. This results in
# one DB query in single thread.
#
# c2mon.server.cacheloading.batchSize = 1000
#
#
# Size of the loader task queue. This should be large enough to contain all
# the batches, i.e. queueSize and batchSize must be set so that
# queueSize > #(cache id range) / batchSize (otherwise exceptions will be
# thrown at startup)
#
# c2mon.server.cacheloading.queueSize = 1000
#
# ----------------------------- Cache persistence ------------------------------
#
# Timeout (in milliseconds) for a single batch to persist
#
# c2mon.server.cachepersistence.timeoutPerBatch = 30000
#
#
# Set the ThreadPoolExecutor's core pool size
#
# c2mon.server.cachepersistence.numExecutorThreads = 1
#
#
# Set the ThreadPoolExecutor's keep-alive seconds
#
# c2mon.server.cachepersistence.keepAliveSeconds = 5
#
#
# Set the capacity for the ThreadPoolExecutor's BlockingQueue
#
# c2mon.server.cachepersistence.queueCapacity = 1000
#
# ---------------------------- Server configuration ----------------------------
#
# Enable/Disable sending configuration events to Process. If disabled, the
# configuration report will always tell the user to restart the DAQ Process
# manually.
#
# c2mon.server.configuration.daqConfigEnabled = true
#
#
# Prevents from removing the DAQ Process configurations, if the DAQ is still
# running. By default this is allowed.
#
# c2mon.server.configuration.allowRunningProcessRemoval = true
#
# ---------------------------- Client communication ----------------------------
#
# URL of the client JMS broker
#
# c2mon.server.client.jms.url = ${c2mon.server.jms.url}
#
#
# Username to authenticate with the client broker
#
# c2mon.server.client.jms.username =
#
#
# Password to authenticate with the client broker
#
# c2mon.server.client.jms.password =
#
#
# The topic prefix used to publish data tags and rules to the client.
# The process ID will be appended.
#
# c2mon.server.client.jms.tagTopicPrefix = c2mon.client.tag
#
#
# Specify the initial number of concurrent consumers to receive client requests
#
# c2mon.server.client.jms.initialConsumers = 5
#
#
# Specify the maximum number of concurrent consumers to receive client requests
#
# c2mon.server.client.jms.maxConsumers = 10
#
#
# Set the time-to-live in seconds for all client messages that are distributed via JMS topics
#
# c2mon.server.client.jms.clientTopicMsgTimeToLive = 60;
#
# ----------------------------- DAQ communication ------------------------------
#
# URL of the DAQ JMS broker
#
# c2mon.server.daq.jms.url = ${c2mon.server.jms.url}
#
#
# The timeout in milliseconds, which the server shall wait for a reply after
# sending a DAQ (re-)configuration
#
# c2mon.server.daq.jms.configurationTimeout = 60000
#
#
# Specify the initial number of concurrent consumers per DAQ queue to receive
# tag updates
#
# c2mon.server.daq.jms.update.initialConsumers = 1
#
#
# Specify the maximum number of concurrent consumers per DAQ queue to receive
# tag updates
#
# c2mon.server.daq.jms.update.maxConsumers = 50
#
#
# Time before all consumers become active (in seconds)
#
# c2mon.server.daq.jms.update.consumerWarmupTime = 120
#
#
# Should the broker wait for the server to finish message processing call
# (i.e. put in cache and notify listeners)
#
# c2mon.server.daq.jms.update.transacted = true
#
#
# Specify the limit for idle executions of a consumer task, not having received
# any message within its execution. If this limit is reached, the task will shut
# down and leave receiving to other executing tasks.
# Raise this limit if you encounter too frequent scaling up and down. With this
# limit being higher, an idle consumer will be kept around longer, avoiding the
# restart of a consumer once a new load of messages comes in.
#
# c2mon.server.daq.jms.update.idleTaskExecutionLimit = 5
#
#
# Specify the maximum number of messages to process in one task. More
# concretely, this limits the number of message reception attempts per task,
# which includes receive iterations that did not actually pick up a message
# until they hit their timeout (see the "receiveTimeout" property).
#
# c2mon.server.daq.jms.update.maxMessagesPerTask = 1
#
#
# Set the timeout to use for receive calls, in milliseconds
#
# c2mon.server.daq.jms.update.receiveTimeout = 1000
#
#
# Set the global TagUpdater's pool size shared by all DAQ update queues
#
# c2mon.server.daq.jms.update.numExecutorThreads = 100
#
#
# Set the TagUpdater's ThreadPoolTaskExecutor keep-alive seconds
#
# c2mon.server.daq.jms.update.keepAliveSeconds = 60
#
#
# Specify the initial number of concurrent consumers to receive DAQ requests
#
# c2mon.server.daq.jms.request.initialConsumers = 1
#
#
# Specify the maximum number of concurrent consumers to receive DAQ requests
#
# c2mon.server.daq.jms.request.maxConsumers = 5
#
#
# Set the transaction mode for the DAQ request queue
#
# c2mon.server.daq.jms.request.transacted = true
#
# -------------------------------- Data history --------------------------------
#
# JDBC URL pointing to a database containing the data history
#
# When using a URL of the form hsql://*, the C2MON server will start
# an in-process HSQL database server which will be accessible to other
# processes.
#
# c2mon.server.history.jdbc.url = ${c2mon.server.jdbc.url}
#
#
# History database account username
#
# c2mon.server.history.jdbc.username = ${c2mon.server.jdbc.username}
#
#
# History database account password
#
# c2mon.server.history.jdbc.password = ${c2mon.server.jdbc.password}
#
#
# Location of the Tag history fallback file, which is used in case of a database
# connection loss.
#
# c2mon.server.history.tagFallbackFile = /tmp/tag-fallback.txt
#
#
# Location of the Alarm history fallback file, which is used in case of a
# database connection loss.
#
# c2mon.server.history.alarmFallbackFile = /tmp/alarm-fallback.txt
#
#
# Location of the Command history fallback file, which is used in case of a
# database connection loss.
#
# c2mon.server.history.commandFallbackFile = /tmp/command-fallback.txt
#
# --------------------------- Elasticsearch support ----------------------------
#
# Enable/Disable writing to Elasticsearch
#
# c2mon.server.elasticsearch.enabled = true
#
#
# Host name or IP address pointing to the Elasticsearch cluster
#
# c2mon.server.elasticsearch.host = localhost
#
#
# Port number on which to communicate
#
# c2mon.server.elasticsearch.port = 9300
#
#
# Optional path prefix for Elasticsearch
#
# c2mon.server.elasticsearch.pathPrefix =
#
#
# Name of the Elasticsearch cluster to connect to. Must be the same for all
# nodes meant to lie inside the same cluster
#
# c2mon.server.elasticsearch.clusterName = c2mon
#
#
# Name of this node
#
# c2mon.server.elasticsearch.nodeName = c2mon
#
#
# Protocol used to communicate with Elasticsearch server (possible values: 'rest', 'transport')
#
# c2mon.server.elasticsearch.client=rest
#
# In case of 'rest', which URL scheme should we use (possible values: 'http', 'https')
#
# c2mon.server.elasticsearch.scheme=https
#
# 
# ElasticSearch authentication parameters
#
# c2mon.server.elasticsearch.username=
# c2mon.server.elasticsearch.password=
#
#
#
#
# Prefix used for all C2MON indices. The final index format becomes:
#   indexPrefix + "-" entity + "_" + bucket
#   e.g.: c2mon-tag_2017-01
#
# c2mon.server.elasticsearch.indexPrefix = c2mon
#
#
# Timeseries index bucketing strategy for tags. Possible values:
# - Y (or y): yearly indices (YYYY)
# - M (or m): monthly indices (YYYY-MM)
# - D (or d): daily indices (YYYY-MM-DD)
# - W (or w): weekly indices (YYYY-ww)
#
# c2mon.server.elasticsearch.indexType = M
#
#
# Timeseries index bucketing strategy for alarms. Possible values:
# - Y (or y): yearly indices (YYYY)
# - M (or m): monthly indices (YYYY-MM)
# - D (or d): daily indices (YYYY-MM-DD)
# - W (or w): weekly indices (YYYY-ww)
#
# c2mon.server.elasticsearch.indexTypeAlarm = M
#
#
# Timeseries index bucketing strategy for supervision documents. Possible values:
# - Y (or y): yearly indices (YYYY)
# - M (or m): monthly indices (YYYY-MM)
# - D (or d): daily indices (YYYY-MM-DD)
# - W (or w): weekly indices (YYYY-ww)
#
# c2mon.server.elasticsearch.indexTypeSupervision = M
#
#
# Number of shards per index
#
# c2mon.server.elasticsearch.shardsPerIndex = 5
#
#
# Number of replicas for each primary shard
#
# c2mon.server.elasticsearch.replicasPerShard = 1
#
#
# Maximum number of actions to accumulate before sending a batch of tags
#
# c2mon.server.elasticsearch.bulkActions = 5600
#
#
# Maximum size for a batch of tags before sending it
#
# c2mon.server.elasticsearch.bulkSize = 1
#
#
# Flush interval in seconds for a batch of tags
#
# c2mon.server.elasticsearch.bulkFlushInterval = 5
#
#
# Maximum number of concurrent requests allowed to be executed at the same time
#
# c2mon.server.elasticsearch.concurrentRequests = 1
#
#
# Absolute path the file to which Tag updates will be written in the event
# of Elasticsearch communication failure
#
# c2mon.server.elasticsearch.tagFallbackFile = /tmp/es-tag-fallback.txt
#
#
# Absolute path the file to which Alarm updates will be written in the event
# of Elasticsearch communication failure
#
# c2mon.server.elasticsearch.alarmFallbackFile = /tmp/es-alarm-fallback.txt
#
#
# Absolute path the file to which Supervision updates will be written in the
# event of Elasticsearch communication failure
#
# c2mon.server.elasticsearch.supervisionFallbackFile = /tmp/es-supervision-fallback.txt
#
#
# Defines whether mapping templates are managed by C2MON
#
# c2mon.server.elasticsearch.autoTemplateMapping = true
#
# -------------------------------- Rule Engine ---------------------------------
#
# Number of threads that the rule evaluation engine will use
#
# c2mon.server.rule.numEvaluationThreads = 1
#
# --------------------------- Ignite Cache support ----------------------------
#
# c2mon.server.cache.ignite.clientMode = false
#
# c2mon.server.cache.ignite.ipFinderAddresses = localhost, localhost:47500..47509
#
# c2mon.server.cache.ignite.onHeapCacheEnabled = false
#
# c2mon.server.cache.ignite.cacheMode = PARTITIONED
#
# c2mon.server.cache.ignite.numberOfBackups = 1
#
# c2mon.server.cache.ignite.cacheRebalanceMode = ASYNC
#
# c2mon.server.cache.ignite.cacheWriteSynchronizationMode = PRIMARY_SYNC
#
# c2mon.server.cache.ignite.partitionLossPolicy = IGNORE
#
# c2mon.server.cache.ignite.statisticsEnabled = false
#
# c2mon.server.cache.ignite.enableJmxMetrics = false
#
# c2mon.server.cache.ignite.transactionalMode = ATOMIC
#
# c2mon.server.cache.ignite.setTxTimeoutOnPartitionMapExchange = 20000
#
# c2mon.server.cache.ignite.defaultRegionName = Default_Region
#
# c2mon.server.cache.ignite.defaultRegionInitialSize = 524288000
#
# c2mon.server.cache.ignite.defaultRegionMaxSize = 21474836480
#
# c2mon.server.cache.ignite.defaultRegionPersistenceEnabled = false
#
# c2mon.server.cache.ignite.defaultRegionPageEvictionMode = RANDOM_LRU
#
# c2mon.server.cache.ignite.defaultRegionMetricsEnabled = false
#
# c2mon.server.cache.ignite.messageQueueLimit = 1024;
#
# c2mon.server.cache.ignite.metricsLogFrequency = 0;
#
