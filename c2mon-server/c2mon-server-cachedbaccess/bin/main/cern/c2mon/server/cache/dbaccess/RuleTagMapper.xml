<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

  <mapper namespace="cern.c2mon.server.cache.dbaccess.RuleTagMapper">

    <resultMap id="ruleTagResultMap" type="cern.c2mon.server.common.rule.RuleTagCacheObject"
               extends="cern.c2mon.server.cache.dbaccess.DataTagMapper.abstractTagResultMap">
      <result property="ruleText" column="TAGRULE" jdbcType="VARCHAR"/>
    </resultMap>

    <!-- getAll needed for persistent caches -->
    <select id="getAll" resultMap="ruleTagResultMap">
     SELECT TAGID, TAGNAME, TAGDESC, TAGMODE, TAGDATATYPE,
            TAGVALUE, TAGVALUEDESC, TAGSRVTIMESTAMP,
            TAGQUALITYDESC,
            TAGUNIT, TAGSIMULATED, TAGLOGGED,
            TAGDIPADDRESS,
            TAGJAPCADDRESS, TAGRULE,
            TAGRULEIDS, ALARMID, TAGMETADATA
       FROM DATATAG LEFT OUTER JOIN ALARM
         ON ALARM_TAGID = TAGID
      WHERE TAGCONTROLTAG=0
        AND TAGRULE IS NOT NULL
    </select>

    <select id="getRowBatch" resultMap="ruleTagResultMap" parameterType="cern.c2mon.server.cache.dbaccess.structure.DBBatch">
      SELECT TAGID, TAGNAME, TAGDESC, TAGMODE, TAGDATATYPE, TAGVALUE, TAGVALUEDESC,
        TAGSRVTIMESTAMP, TAGQUALITYDESC, TAGUNIT, TAGSIMULATED, TAGLOGGED,
        TAGDIPADDRESS, TAGJAPCADDRESS, TAGRULE, TAGRULEIDS, ALARMID, TAGMETADATA
      FROM DATATAG
        LEFT OUTER JOIN ALARM
          ON ALARM_TAGID = TAGID
      WHERE TAGID IN (
        SELECT TAGID
        FROM (
          SELECT rownum AS RN, TAGID
          FROM DATATAG
          WHERE TAGCONTROLTAG = 0
            AND TAGRULE IS NOT NULL
          ORDER BY TAGID)
        WHERE RN <![CDATA[ >= ]]> #{startRow}
          AND RN <![CDATA[ <= ]]> #{endRow})
    </select>

    <select id="getRowBatch" resultMap="ruleTagResultMap" parameterType="cern.c2mon.server.cache.dbaccess.structure.DBBatch" databaseId="mysql">
      SELECT TAGID, TAGNAME, TAGDESC, TAGMODE, TAGDATATYPE, TAGVALUE, TAGVALUEDESC,
        TAGSRVTIMESTAMP, TAGQUALITYDESC, TAGUNIT, TAGSIMULATED, TAGLOGGED,
        TAGDIPADDRESS, TAGJAPCADDRESS, TAGRULE, TAGRULEIDS, ALARMID, TAGMETADATA
      FROM DATATAG LEFT OUTER JOIN ALARM ON ALARM_TAGID = TAGID
      WHERE TAGCONTROLTAG = 0 AND TAGRULE IS NOT NULL
      ORDER BY TAGID
      LIMIT #{rowCount} OFFSET #{startRow}
    </select>
    <!-- getItem needed for persistence caches -->
    <select id="getItem" resultMap="ruleTagResultMap" parameterType="Long">
     SELECT TAGID, TAGNAME, TAGDESC, TAGMODE, TAGDATATYPE,
            TAGVALUE, TAGVALUEDESC, TAGSRVTIMESTAMP,
            TAGQUALITYDESC,
            TAGUNIT, TAGSIMULATED, TAGLOGGED,
            TAGDIPADDRESS,
            TAGJAPCADDRESS, TAGRULE,
            TAGRULEIDS, ALARMID, TAGMETADATA
       FROM DATATAG LEFT OUTER JOIN ALARM
         ON ALARM_TAGID = TAGID
      WHERE TAGCONTROLTAG=0
        AND TAGRULE IS NOT NULL
        AND TAGID=#{id}
    </select>

    <update id="updateCacheable" parameterType="cern.c2mon.server.common.rule.RuleTagCacheObject">
      UPDATE DATATAG
         SET TAGVALUE = #{value,javaType=java.lang.Object,jdbcType=VARCHAR},
             TAGVALUEDESC = SUBSTR(#{valueDescription,jdbcType=VARCHAR}, 1, 2000),
             TAGSRVTIMESTAMP = #{cacheTimestamp, jdbcType=TIMESTAMP},
             TAGQUALITYDESC = SUBSTR(#{dataTagQuality,javaType=cern.c2mon.shared.common.datatag.DataTagQuality,jdbcType=VARCHAR}, 1, 1000),
             TAGSIMULATED = #{simulated,jdbcType=NUMERIC}
       WHERE TAGID=#{id}
    </update>

    <update id="updateConfig" parameterType="cern.c2mon.server.common.rule.RuleTagCacheObject">
      UPDATE DATATAG
         SET TAGNAME = #{name},
             TAGDESC = SUBSTR(#{description,jdbcType=VARCHAR}, 1, 100),
             TAGMODE = #{mode},
             TAGDATATYPE = #{dataType},
             TAGUNIT =  #{unit,jdbcType=VARCHAR},
             TAGLOGGED = #{logged,jdbcType=NUMERIC},
             TAGDIPADDRESS = #{dipAddress,jdbcType=VARCHAR},
             TAGJAPCADDRESS = #{japcAddress,jdbcType=VARCHAR},
             TAGRULEIDS = #{ruleIdsString, jdbcType=VARCHAR},
             TAGRULE = #{ruleText,jdbcType=VARCHAR},
             TAGMETADATA = #{metadata,jdbcType=VARCHAR}
       WHERE TAGID=#{id}
    </update>

    <!-- must specify jdbcType for parameters that can be null in DB  -->
    <insert id="insertRuleTag" parameterType="cern.c2mon.server.common.rule.RuleTagCacheObject">
      INSERT INTO DATATAG (TAGID, TAGNAME, TAGDESC, TAGMODE, TAGDATATYPE,
                           TAGVALUE, TAGVALUEDESC, TAGSRVTIMESTAMP,
                           TAGQUALITYDESC,
                           TAGUNIT, TAGSIMULATED, TAGLOGGED,
                           TAGDIPADDRESS,
                           TAGJAPCADDRESS, TAGRULE,
                           TAGRULEIDS, TAGCONTROLTAG, TAGMETADATA
                )
      VALUES (#{id},#{name},SUBSTR(#{description, jdbcType=VARCHAR}, 1, 100),#{mode},#{dataType},
              #{value,javaType=java.lang.Object,jdbcType=VARCHAR},SUBSTR(#{valueDescription,jdbcType=VARCHAR}, 1, 2000),
              #{cacheTimestamp, jdbcType=TIMESTAMP},
              SUBSTR(#{dataTagQuality,javaType=cern.c2mon.shared.common.datatag.DataTagQuality,jdbcType=VARCHAR}, 1, 1000),
              #{unit,jdbcType=VARCHAR},#{simulated,jdbcType=NUMERIC},#{logged,jdbcType=NUMERIC},
              #{dipAddress,jdbcType=VARCHAR},#{japcAddress,jdbcType=VARCHAR}, #{ruleText,jdbcType=VARCHAR},
              #{ruleIdsString, jdbcType=VARCHAR},
              0, #{metadata, jdbcType=VARCHAR}
                )
    </insert>

    <select id="getNumberItems" resultType="Integer">
      SELECT COUNT(DISTINCT TAGID)
        FROM DATATAG
       WHERE TAGRULE is not NULL
         AND TAGCONTROLTAG=0
    </select>

    <delete id="deleteRuleTag" parameterType="Long">
      delete from DATATAG where TAGID = #{id}
    </delete>

    <select id="isInDb" resultType="boolean" parameterType="Long">
      SELECT count(*)
        FROM DATATAG
       WHERE TAGID = #{id}
         AND TAGCONTROLTAG=0
         AND TAGRULE IS NOT NULL
    </select>

  </mapper>
